1，生成四叉树
	以数组的方式进行组织节点
		根节点的depth = 0 下一层的depth = 1 然后 是 2 ...
		根据 InDepth,x,y 计算出 节点数组下标索引:
			下标偏移数组 = [0 4 16 64 256...]
			下标偏移数组 = [0 4 16 64 256...]
			获取节点所在层基地址 = 下标偏移数组[InDepth]
			return 获取节点所在层基地址 + z / (2^(MaxDepth-InDepth)) * ( 2^InDepth) ) + x / (2^(MaxDepth-InDepth))
			//优化1
			return 获取节点所在层基地址 + (z >> (MaxDepth-InDepth)) << InDepth + (x >> (MaxDepth-InDepth))
			
	
2，将场景中每个物体加入到四叉树的每个节点中
	（整个算法的关键在于，自顶向下遍历，找出完全包围该物体的最小节点）
	（1） 检查当前节点的所有子节点。如果不存在子节点，直接跳到第三步。
	（2） 如果节点完全包含物体，那么将该子节点设置成当前节点，然后重复第一步。
	（3） 物体是这个节点的成员。将其加入当前节点的成员链表然后退出。
	
3 提升四叉树
		1) 计算世界包围框x轴和z轴
		2) 分别选取一个刚好大于x轴和z轴2的幂次方作为根节点的轴长
		3) 以较短轴为参考，计算四叉树最大深度
		4) 构建四叉树
		
4 判断物品位于四叉树那一层:
	1）计算出分别针对x轴和z轴的深度:
		获取物品包围框在对应轴上的投影跨度，得到最小值和最大值
		计算对应轴深度：
			四叉树最大深度 - bsr（最小值 异或 最大值）（使用汇编指令bsr 获取 最高位 BitIndex）
		记录对应轴深度
	2）取x轴和z轴中深度值较小
	
